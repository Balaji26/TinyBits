<beans xmlns="http://www.springframework.org/schema/beans"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:util="http://www.springframework.org/schema/util"
  xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
    http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.0.xsd">
     
    <bean id="ent" class="org.ninja.spring.core.Entitlement">
      <!-- In spring when bean is initialized as constructor-arg then dependency can be injected by name, type or index -->
       
       <!-- constructor-arg type="java.lang.String" value="Entitlement"/>
       <constructor-arg type="int" value="100"-->
       
       <constructor-arg index="0" value="Index Demo"/>
       <constructor-arg index="1" value="200" />
    </bean>
    
    <!-- Inner beans are created inside the <property></property> in the setter method injection and in the case 
       of constructor argument, inner bean is created inside <constructor-arg> </constructor-arg>. Inner beans do
       not require id or name and scope.-->
    
    <bean id="college" class="org.ninja.spring.core.College">
       <property name="name" value="SSIC"/>
       <property name="student">
	       <bean class="org.ninja.spring.core.Student">
	         <property name="name" value="Ram"/>
	         <property name="age" value="30"/>
	       </bean>
	   </property>
    </bean>
    <bean id="concrete" class="org.ninja.spring.core.ConcreteCollection">
       <property name="properties">
	  <props>
               <prop key="propKeyA">propValueA</prop>
               <prop key="propKeyB">propValueB</prop>
          </props>
      </property>
	   
      <property name="list">
	 <list>
             <value>listA</value>
             <value>listB</value>
         </list>
      </property>
	   
      <property name="set">
        <set>
            <value>setA</value>
            <value>setB</value>
        </set>
      </property>
	   
      <property name="map">
	 <map>
            <entry key="0" value="mapValueA"/>           
            <entry key="1" value="mapValueB"/>
         </map>
      </property>
    </bean>
    
    <!-- In Spring, if we need to inject null and empty value, we can do it while creating bean and can set dependency as described below.-->
    <bean id="test" class="org.ninja.spring.core.Test">
	   <property name="a"> <null/></property>
           <property name="b" value=""/>
     </bean>

<!-- A bean with singleton scope means only one shared instance is managed by spring container. All the 
dependency of that bean is fulfilled by one instance of bean. In the below example we have a bean X, and
we have referred it to two bean A and B. As X is in singleton scope so only one time the bean X will be created. 
singleton scope is the default scope of every bean in spring-->

    <bean id="testX" class="com.concretepage.X" scope="singleton"/>
    
    <bean id="testA" class="com.concretepage.A">
      <property name="x" ref="testX"/>
    </bean>
    
    <bean id="testB" class="com.concretepage.B">
      <property name="x" ref="testX"/>
    </bean>
